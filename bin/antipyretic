#!/usr/bin/env ruby

require_relative '../lib/antipyretic'
require 'optparse'

options = {}
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: antipyretic [options] filename"

  opts.on("-p", "--print", "Print output to STDOUT") do |value|
    options[:print] = value
  end

  opts.on("--csv", "Print CSV formatted output to STDOUT") do |value|
    options[:csv] = value
  end

  opts.on("-d", "--directory", "The filename is a directory") do |value|
    options[:dir] = value
  end

  opts.on("-t", "--text", "Print the filename as a text file. Works on a single file only and cannot be used with -d.") do |value|
    options[:text] = value
  end

  opts.on("-m", "--match REGEXP", "Print all matches of the file against REGEXP. Works on a single file only and cannot be used with -d.") do |value|
    options[:match] = value
  end

  opts.on("-c", "--classify FILE", "A YML FILE which contains rules and tags for classifying lines") do |value|
    options[:classify] = value
  end

  opts.on("--from DATE", "Filter lines from date") do |value|
    options[:from_date] = Date.parse(value)
  end

  opts.on("--to DATE", "Filter lines to date") do |value|
    options[:to_date] = Date.parse(value)
  end

  opts.on("--tag REGEXP", "Filter lines to match REGEXP only") do |value|
    options[:tag] = Regexp.new(value, Regexp::IGNORECASE)
  end

  opts.on("--list", "List files included after filters are applied") do |value|
    options[:list] = value
  end

  opts.on("--verbose", "Show progress while reading files") do |value|
    options[:verbose] = value
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!
options[:filename] = ARGV.join(' ')

Classifier.load options[:classify] if options[:classify]

if options[:text]
  puts PDF::Reader.new(options[:filename]).pages.map(&:text).join("\n#{'-' * 120}\n")
elsif options[:match]
  regexp = Regexp.new options[:match]
  PDF::Reader.new(options[:filename]).each_line do |line|
    match = line.match regexp
    puts "#{'-' * 120}\n#{line}\n#{match.pretty_print}\n" if match
  end
elsif options[:dir]
  Dir.foreach(options[:filename]) do |filename|
    next unless filename.end_with? '.pdf'
    puts "Processing file #{filename}" if options[:verbose]
    Processor.process_file File.join(options[:filename], filename)
  end
else
  Processor.process_file options[:filename]
end

if options[:from_date] || options[:to_date]
  Processor.filter_by_period!(options[:from_date] || Date.new(1900, 1, 1), options[:to_date] || Date.new(2100, 1, 1))
end

Processor.filter_by_tag!(options[:tag]) if options[:tag]

if options[:list]
  statements = []
  Processor.lines.each do |line|
    statements << line.statement unless statements.include? line.statement
  end
  puts statements.sort { |a, b| a.date <=> b.date }.map { |statement| "#{statement.date} #{statement.name.ljust(15)} #{statement.filename}"}
end

if options[:print]
  max_description, max_amount = 0, 0
  Processor.lines.each do |line|
    max_description = [max_description, line.description.length].max
    max_amount = [max_amount, ('%0.2f' % line.amount).length].max
  end

  total = 0
  Processor.lines.each do |line|
    total += line.amount
    puts "#{line.date}  #{line.description.ljust(max_description)}  #{('%0.2f' % line.amount).rjust(max_amount)}  #{line.tags.join(', ')}"
  end
  puts "Total #{'%0.2f' % total}"
end

if options[:csv]
  result = CSV.generate do |csv|
    csv << ['date', 'description', 'amount', 'tag']
    Processor.lines.each do |line|
      csv << [
        line.date.to_s,
        line.description,
        ('%0.2f' % line.amount),
        line.tags.join(', ')
      ]
    end
  end
  puts result
end
